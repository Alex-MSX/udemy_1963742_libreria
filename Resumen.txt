APPS
django-admin startapp name_app
Dentro de settings.py agregar la app_name a aplicaciones instaladas
NOTA: puedo agrupar todas mis apps dentro de una carpeta llamada apps

URLS GENERAL
Puedo agregar cada app.urls con el comando sin importar tener varias apps y todas empezar con vacío
path('', include('apps.app1_name.urls'))
path('', include('apps.app2_name.urls'))
...

URLS INDIVIDUAL
Agregar el nombre de la app con el parametro
app_name = 'app_name'

ENLACES

Para crear un enlace utilizo
{% url '<urls>app_name:<urls>name' %}

Cuando la URL requiere un parámetro.
{% url '<urls>app_name:<urls>name' obj.param %}

MODELS
Puedo definir como se llama la tabla en el admin con la clase
class Meta:
        verbose_name_plural = "Autores"

Cuando tengo bases de datos relacionadas, si tengo una relación n -> oo puedo definir el parametro related_name para hacer una búsqueda más simple
Cliente: (n)
Poliza: (oo) campo cliente = ForeignKey(Cliente, related_name='polizas')
polizas = Cliente.polizas.all()

Poliza: (n)
Recibos: (oo) campo poliza = ForeignKey(Poliza, related_name='recibos')
recibos = Poliza.recibos.all()

ADMIN
Puedo modificar la apariencia de mi admin agregando las clases

class <Model>Admin(admin.ModelAdmin):
    list_display = ('campo1', 'campo2', ... , 'campoN')
    search_fields = ('campo1', 'campo2', ... , 'campoN')
    list_filter = ('campo1', 'campo2', ... , 'campoN')

VIEWS
Al utilizar listas basadas en clase, necesito cumplir los mínimos requerimientos (*opcionales)

TemplateView
- template_name: url de la template donde realizará el render de la información
*

ListView
- template_name: url de la template donde realizará el render de la información
- model/queryset: cuando deseo listar todos los objetos del modelo relacionado / personalizar la consulta
- context_object_name: como defino el nombre del objeto del model/queryset que pasa a la plantilla
* paginate_by: cuando deseamos crear paginación

CreateView
- template_name: url de la template donde realizará el render de la información
- model: modelo relacionado con el objeto a crear
- fields: que campos vamos a solicitar capturar
- success_url: a qué página redirigirse cuando el proceso sea realizado con éxito

UpdateView
- template_name: url de la template donde realizará el render de la información
- model: modelo relacionado con el objeto a crear
- fields: que campos vamos a solicitar capturar
- success_url: a qué página redirigirse cuando el proceso sea realizado con éxito
NOTA: El objeto que se pasa al template es un form

DeleteView
- template_name: url de la template donde realizará el render de la información
- model: modelo relacionado con el objeto a crear
- fields: que campos vamos a solicitar capturar
- success_url: a qué página redirigirse cuando el proceso sea realizado con éxito
NOTA: El objeto que se pasa al template es el modelo en minúscula

NOTA FINAL: Cuando utilizar TemplateView o ListView
TemplateView: cuando mi contexto requiere listar junto con el objeto "padre" (Ej: un cliente y un listado de pólizas)
ListView: cuando mi contexto solo tiene que listar sin el objeto "padre". (Ej: un listado de polizas)
Puedo hacerlo con ListView enviando como contexto el objeto "padre" y tener un related_name para poder llamar a sus "hijos"
